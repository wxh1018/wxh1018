{"meta":{"title":"Wxh's blog","subtitle":"","description":"专注 WEB 开发的技术博客","author":"Wxh","url":"https://www.wxh520.xyz","root":"/"},"pages":[{"title":"","date":"2019-11-10T17:15:49.357Z","updated":"2019-11-10T17:15:49.357Z","comments":true,"path":"about/index.html","permalink":"https://www.wxh520.xyz/about/index.html","excerpt":"","text":"关于我从事 WEB 开发，主要开发语言 PHP，熟悉使用 Laravel、ThinkPHP 等主流框架；对 Modern PHP 情有独钟；有一定的代码洁癖。 对服务端、前端、数据分析等技能有所了解。 热爱开源项目、热爱新技术、热爱新事物。 关于工作城市：深圳 关于学习正在往终身学习者前进…近期学习方向：Python (人工智能) 关于座右铭 The Harder You Work, The Luckier You Will Be. (越努力，越幸运) 关于爱好热爱运动，尤其喜爱羽毛球、阅读、电影（Top250）、旅行。 联系我 Home: minhow.com Blog: blog.minhow.com Email: wxhmyq@gmail.com GitHub: MinHow WeiBo: MinHow Twitter: MinHow"},{"title":"tags","date":"2019-11-10T13:27:28.000Z","updated":"2019-11-10T15:06:30.199Z","comments":true,"path":"tages/index.html","permalink":"https://www.wxh520.xyz/tages/index.html","excerpt":"","text":""}],"posts":[{"title":"JS面试题","slug":"JS面试题总结","date":"2019-11-10T16:00:00.000Z","updated":"2019-11-10T17:00:23.947Z","comments":true,"path":"2019/11/11/JS面试题总结/","link":"","permalink":"https://www.wxh520.xyz/2019/11/11/JS%E9%9D%A2%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93/","excerpt":"","text":"一js基础1，this关键字的作用:***普通函数 window构造函数 当前构造函数创建的对象在new这个构造函数的时候 会在内存中创建一个对象，此时会让this指向刚创建好的这个对象方法中的this 方法所属的对象，谁调用这个方法this就指向谁函数处理函数中的this 事件源 谁调用的该事件 this就指向谁 2，call和apply的区别功能都一样，都是将当前函数作为指定对象的方法执行，即函数中的this是指对象call（this.Obj, arg1,arg2……）//将所有参数一个个的传递进去apply(this ,[argArray]) //将所有参数放在数组中传入 3.worker继承Person的方法//使用构造函数+原型的组合模式 1234567891011121314function Person(age,name)&#123; this.age = age; this.name = name&#125;Person.prototype.show = function()&#123; alert(&apos;父级方法&apos;)&#125;function Worker(age,name,job)&#123; Person.applay(this,arguments); this.job = job&#125;Worker.prototype = new Person()var Person = new Person(14,&apos;张三&apos;)var worker = new Worrker(25,&apos;里斯&apos;,&apos;程序员&apos;) 4.var let const的区别var 定义的变量，没有快的概念，可以跨块访问，不能跨函数访问let定义的变量，只能在块级作用域里访问，不能跨块访问，也不能跨函数访问const用来定义常量，使用时必须初始化（即必须赋值），只能在块作用域里访问，而且不能修改cookie4k 5m 5.如何阻止事件冒泡和事件默认行为//阻止事件冒泡if(typeof ev.stopPropagation == ‘function’){ ev.stopPropagtion()}else{//非标准 window.evnet.cancelBubble = true}//阻止事件默认行为return false 6.javascript的内置对象和宿主对象内置对象为Object,Array,Function,DateMath 等宿主为 浏览器自带的window等 7.“==”和”===”的不同前者会自动转换类型后者不会 8.浏览器的同源策略一段Ajax只能读取来自同一来源的窗口和文档的属性，这里的同意来源是指主机名，协议和端口号的组合 9.解释var a = null;alert(typeof a)//objectnull是只有一个值的数据类型 这个值就是null，表示一个空指针对象，所以用typeof检测会返回object 10. JavaScript的数据类型都有什么？基本数据类型：String,boolean,Number,Undefined, Null引用数据类型：Object, Array, Function原始数据类型：Symbol那么问题来了，如何判断某变量是否为数组数据类型？方法一.判断其是否具有“数组性质”，如slice()方法。可自己给该变量定义slice方法，故有时会失效方法二.obj instanceof Array 在某些IE版本中不正确null,array,object返回的都是‘object’ 11. 输出今天的日期，以YYYY-MM-DD的方式，比如今天是2014年9月26日，则输出2014-09-26var d = new Date();// 获取年，getFullYear()返回4位的数字var year = d.getFullYear();// 获取月，月份比较特殊，0是1月，11是12月var month = d.getMonth() + 1;// 变成两位month = month &lt; 10 ? ‘0’ + month : month;// 获取日var day = d.getDate();day = day &lt; 10 ? ‘0’ + day : day;alert(year + ‘-‘ + month + ‘-‘ + day); 12. 将字符串”{$id}{$name}”中的{$id}替换成10，{$name}替换成Tony （使用正则表达式）1&quot;&lt;tr&gt;&lt;td&gt;&#123;$id&#125;&lt;/td&gt;&lt;td&gt;&#123;$id&#125;_&#123;$name&#125;&lt;/td&gt;&lt;/tr&gt;&quot;.replace(/&#123;\\$id&#125;/g, &apos;10&apos;).replace(/&#123;\\$name&#125;/g, &apos;Tony&apos;); 13.var的变量提升底层原理是什么JS引擎的工作方式：先解析代码 获取所有声明的变量然后再运行 14.箭头函数的特点相比普通函数更简洁的语法本身没有this，捕获其所在上下文（作用域）的this值，作为自己的 this 值不能使用new不绑定arguments，用rest参数…解决使用call()和apply()调用箭头函数没有原型属性不能简单返回对象字面量箭头函数不能当做Generator函数,不能使用yield关键字 15. 为了保证页面输出安全，我们经常需要对一些特殊的字符进行转义，请写一个函数escapeHtml，将&lt;, &gt;, &amp;, “进行转义12345678910111213141516// let str = &apos;&gt;&amp;&amp;&apos;// function escapeHtml(str) &#123;// return str.replace(/[&lt;&gt;&amp;“]/g, match =&gt; &#123;// switch (match) &#123;// case &apos;&gt;&apos;:// return &apos;&amp;gt&apos;;// case &apos;&lt;&apos;:// return &apos;&amp;lt&apos;;// case &apos;&amp;&apos;:// return &apos;&amp;amp&apos;;// case &apos;\\&apos;&apos;:// return &apos;&amp;quot&apos;;// &#125;// &#125;)// &#125;// console.log(escapeHtml(str)); 16. foo = foo||bar ，这行代码是什么意思？为什么要这样写？如果foo存在，值不变，否则把bar的值赋给foo。短路表达式：作为”&amp;&amp;”和”||”操作符的操作数表达式，这些表达式在进行求值时，只要最终的结果已经可以确定是真或假，求值过程便告终止，这称之为短路求值。 17 阻止事件冒泡和默认行为冒泡 :e.stopPropagation() e.cancelBubble = true;默认行为：e.preventDefault()e.returnValue = false 18.列举浏览器对象模型BOM里常用的至少4个对象，并列举window对象的常用方法至少5个对象：window, document, location, screen, history, navigator方法：alert(), confirm(), prompt(), open(), close() 19. Javascript如何实现继承？构造继承法2.原型继承法3.实例继承法 20，// push()：向数组的最后面插入一个或多个元素，返回结果为该数组新的长度。// pop()：删除数组中的最后一个元素，返回结果为被删除的元素。// unshift()：在数组最前面插入一个或多个元素，返回结果为该数组新的长度。插入元素后，其他元素的索引会依次调整。// shift()：删除数组中的第一个元素，返回结果为被删除的元素。 // 添加返回长度// 删除返回删除的元素 21，1. 判断一个字符串中出现次数最多的字符，统计这个次数123456789101112131415161718var str = &apos;asdfssaaasasasasaa&apos;;var json = &#123;&#125;;for (var i = 0; i &lt; str.length; i++) &#123; if(!json[str.charAt(i)])&#123; json[str.charAt(i)] = 1; &#125;else&#123; json[str.charAt(i)]++; &#125;&#125;;var iMax = 0;var iIndex = &apos;&apos;;for(var i in json)&#123; if(json[i]&gt;iMax)&#123; iMax = json[i]; iIndex = i; &#125;&#125;alert(&apos;出现次数最多的是:&apos;+iIndex+&apos;出现&apos;+iMax+&apos;次&apos;); 22 闭包是什么，有什么特性，对页面有什么影响当内部函数使用了外部函数的局部变量时, 产生的一个对象(包含了所有使用了的变量) 作用: 在函数执行完后, 局部变量还会存在 12345678910function outer()&#123;var num = 1;function inner()&#123;var n = 2;alert(n + num);&#125;return inner;&#125;var r = outer();r(); 23 生成5个不同的随机数；//思路：5个不同的数，每生成一次就和前面的所有数字相比较，如果有相同的，则放弃当前生成的数字！ 123456789var num1 = [];for(var i = 0; i &lt; 5; i++)&#123; num1[i] = Math.floor(Math.random()*10) + 1; //范围是 [1, 10] for(var j = 0; j &lt; i; j++)&#123; if(num1[i] == num1[j])&#123; i--; &#125; &#125;&#125; 26.什么是js的严格模式 消除Javascript语法的一些不合理、不严谨之处，减少一些怪异行为; 消除代码运行的一些不安全之处，保证代码运行的安全； 提高编译器效率，增加运行速度； 为未来新版本的Javascript做好铺垫。“严格模式”体现了Javascript更合理、更安全、更严谨的发展方向，IE 10在内的主流浏览器“use strict”;//是进入严格模式的标志(老版本的浏览器会把它当作一行普通字符串，加以忽略。)27 浏览器标准模式和怪异模式之间的区别是什么？所谓的标准模式是指，浏览器按W3C标准解析执行代码；怪异模式则是使用浏览器自己的方式解析执行代码，因为不同浏览器解析执行的方式不一样，所以我们称之为怪异模式 28你如何优化自己的代码？代码重用避免全局变量（命名空间。封闭空间。模块化mvc）拆分函数避免过于臃肿注释 29 请尽可能详尽的解释ajax的工作原理Ajax的工作原理相当于在用户和服务器之间加了—个中间层，使用户操作与服务器响应异步化。这样把以前的一些服务器负担的工作转嫁到客户端，利于客户端闲置的处理能力来处理，减轻服务器和带宽的负担，从而达到节约ISP的空间及带宽租用成本的目的。简单来说通过XmlHttpRequest对象来向服务器发异步请求，从服务器获得数据，然后用javascript来操作DOM而更新页面。这其中最关键的一步就是从服务器获得请求数据。要清楚这个过程和原理，我们必须对 XMLHttpRequest有所了解。 二：Vue面试题30：谈下你对Vuex的认识vuex是什么，干嘛的，他的组成部分，每一部分是干嘛的，有啥有特点，你在项目中哪些数据让他管理 ，怎么管理，遇到过什么问题没 怎么处理的他就是状态管理模式，场景有：单页应用中，组件之间的状态、音乐播放、登录状态、加入购物车state 进行组件共享数据的集中存储{}getters 原理 commputed 用于返回最新的数据值 {计算属性写法}mutations 唯一一个能够修改state里面数据的 地方（函数），不能做异步actions 处理异步请求 异步调用mutations 函数modules 模块 当数据比较多的情况下 而且数据之前灭有什么关系 用模块划分，每一个模块对象都包含以上4部分commit 同步调用actions方法dispatch 异步调用actions方法 31：防抖节流1234567891011121314151617181920212223242526272829303132333435363738394041424344454647防抖：函数触发n秒后执行，如果在n秒之内触发 则重新计时// 假防抖let timer = nullfunction fd() &#123; clearTimeout(timer) timer = setTimeout(show, 1000)&#125;function show() &#123; console.log(input1.value);&#125;input1.oninput = function () &#123; fd(show)&#125;// 真防抖function fd2(fn, delay) &#123; let timer2 = null console.log(timer2) function a() &#123; console.log(timer2) clearTimeout(timer2) timer2 = setTimeout(fn, delay) &#125; return a&#125;function show2() &#123; console.log(input2.value);&#125;input2.oninput = fd2(show2, 500)节流：在n秒内只触发一次函数，n秒内多次触发只有一次生效input3.oninput = jl()function jl() &#123; let timer3 = null; return function () &#123; if (!timer3) &#123; timer3 = setTimeout(() =&gt; &#123; show3() timer3 = null; &#125;, 1000) &#125; &#125;&#125;function show3() &#123; console.log(input3.value);&#125;","categories":[{"name":"JS","slug":"JS","permalink":"https://www.wxh520.xyz/categories/JS/"}],"tags":[{"name":"面试题","slug":"面试题","permalink":"https://www.wxh520.xyz/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"},{"name":"基础","slug":"基础","permalink":"https://www.wxh520.xyz/tags/%E5%9F%BA%E7%A1%80/"}],"author":"WXH"},{"title":"my-first-blog","slug":"my-first-blog","date":"2019-11-09T13:36:17.000Z","updated":"2019-11-09T13:37:56.896Z","comments":true,"path":"2019/11/09/my-first-blog/","link":"","permalink":"https://www.wxh520.xyz/2019/11/09/my-first-blog/","excerpt":"","text":"one","categories":[],"tags":[]},{"title":"My first blog","slug":"hello-world","date":"2019-11-08T06:02:35.261Z","updated":"2019-11-09T12:49:59.124Z","comments":true,"path":"2019/11/08/hello-world/","link":"","permalink":"https://www.wxh520.xyz/2019/11/08/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]},{"title":"MiHo-主题安装和配置详情","slug":"installation-configuration","date":"2017-07-31T16:00:00.000Z","updated":"2019-10-18T10:23:48.000Z","comments":true,"path":"2017/08/01/installation-configuration/","link":"","permalink":"https://www.wxh520.xyz/2017/08/01/installation-configuration/","excerpt":"","text":"一. 主题简介&emsp;&emsp;MiHo 是一款单栏响应式的Hexo主题；基于 Hexo 3.0+ 制作，兼容移动端浏览；主题的代码托管在GitHub上，欢迎Star和Fork；如遇到问题或发表建议，可以提Issues，也可以在博客中留言给我，另外,喜欢的话不妨给个 Star。 二. 安装2.1 安装主题1$ git clone https://github.com/WongMinHo/hexo-theme-miho.git themes/miho MiHo 主题需要Hexo 3.0或以上版本，请先升级。 2.2 更新12cd themes/mihogit pull 2.3 依赖安装如下依赖如果已经安装，请看配置介绍。 Json-content生成站点文章静态数据，用于站内搜索。 1npm install hexo-generator-json-content --save 三. 站点配置站点配置文件_config.yml在hexo根目录下。 3.1 启用主题1`theme: miho` 3.2 网站基本配置以下配置是站点的全局配置，更多配置，请查看 123456title: MinHow's Blogsubtitle: 网站副标题description: 专注 WEB 开发的技术博客author: MinHowlanguage: 网站使用的语言timezone: 网站时区 3.3 jsonContent配置详细的配置请查看hexo-generator-json-content 123456789101112131415161718jsonContent: meta: false pages: false posts: title: true date: true path: true text: false raw: false content: false slug: false updated: false comments: false link: false permalink: false excerpt: false categories: false tags: false 四. 主题配置编辑主题配置文件，themes/miho/_config.yml。 4.1 属性下面将介绍几个比较重要的配置。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122# hexo-theme-miho# https://github.com/wongminho/hexo-theme-miho# Favicon of your site | 网站iconfavicon: /favicon.ico# Header# Keywords of your site | 网站关键字keywords: MinHow,MinHow's Blog# Head headline | 头部标题header_title: MinHow's Blog# Head description | 头部描述header_description: 一个专注 WEB 开发的技术博客# Link to your logo | logo地址logo: images/logo.png# Link to your banner_img | 首页banner图地址banner_img: images/banner.jpg# Menu setting | 菜单设置# name: Font Awesome icon | Font Awesome 图标# title: Home Title | 标题# url: //minhow.com Url, absolute or relative path | 链接，绝对或相对路径# target: true Whether to jump out | 是否跳出menu: home: title: Home url: / target: false archive: title: Archives url: /archives target: false user: title: About url: /about target: false# Social setting, use to display social information | 社交设置，用来展示社交信息# name: Font Awesome icon | Font Awesome 图标# title: Home Icon title | 图标标题# url: //minhow.com Url, absolute or relative path | 链接，绝对或相对路径# target: true Whether to jump out | 是否跳出social: home: title: MinHow url: //minhow.com target: true github: title: Github url: //github.com/wongminho target: true weibo: title: Weibo url: //weibo.com/WongMinHo target: true twitter: title: Twitter url: //twitter.com/huangminhow target: true #qq: #weixin: #snapchat: #telegram: #mail: #facebook: #google: #linkedin:# Content# Excerpt length | 摘录长度excerpt_length: 190# Excerpt link | 摘录链接excerpt_link: more&gt;&gt;# New window open link | 新窗口打开文章open_new_link: false# Article default cover picture，size：350*150 | 文章默认封面图，尺寸：350*150cover_picture: images/banner.jpg# Open background particles | 开启背景粒子open_bg_particle: true# Open animation in homepage and head | 开启主页及头部动画open_animation: true# Article# Open toc | 是否开启toctoc: true# Open share | 是否开启分享share: true# Style customization | 样式定制style: # Main color tone | 主色调 main_color: '#0cc'# Comments | 评论# 畅言，输入appid和appkeychangyan_appid: falsechangyan_appkey: false# 友言，输入idyouyan_id: false# disqusdisqus: false# Analytics | 分析# 站长分析，输入站点idcnzz_analytics: false# 百度分析，输入key值baidu_analytics: false# google analytics | google分析google_analytics: false# Footer# Access statistics | “不蒜子”访问量统计access_counter: on: true site_uv: 总访客数： site_pv: 总访问量：# Copyright Information | 版权信息copyright: 2017 MinHow 4.2 文章封面图文章默认封面图，尺寸：350*150，当文章基本配置没有cover_picture时才显示。 1cover_picture: images/banner.jpg 4.3 开启背景粒子是否开启背景粒子。 1open_bg_particle: true 4.4 开启主页及头部动画是否开启主页及头部动画。 1open_animation: true 4.5 评论支持畅言、disqus。 1234567# 畅言，输入appid和appkeychangyan_appid: falsechangyan_appkey: false# 友言，输入idyouyan_id: false# disqusdisqus: false 4.6 数据统计支持站长、百度、google三种数据统计，正确填写配置信息即可。 123456# 站长分析，输入站点idcnzz_analytics: false# 百度分析，输入key值baidu_analytics: false# google分析google_analytics: false 4.7 文章基本配置123456789101112---title: Hello Worlddate: 2017-06-18categories: Firstauthor: MinHowtags: - First - Secondcover_picture: /images/banner.jpg--- MinHow-This is a summary&lt;!-- more --&gt; 说明： 需要注意tags和摘要的写法，不然首页不能正确显示标签和摘要； cover_picture文章封面图，不填默认显示_config.yml配置的图片。","categories":[{"name":"开源项目","slug":"开源项目","permalink":"https://www.wxh520.xyz/categories/%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/"}],"tags":[{"name":"博客","slug":"博客","permalink":"https://www.wxh520.xyz/tags/%E5%8D%9A%E5%AE%A2/"},{"name":"开源项目","slug":"开源项目","permalink":"https://www.wxh520.xyz/tags/%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/"}],"author":"MinHow"}]}